# https://en.wikipedia.org/wiki/Polybius_square
with open('cipher.txt') as f:
    cipher = f.read().strip().split(",")

ALPHABET = [chr(ord('a')+i) for i in range(26)]

ALPHABET.remove('k') # "combining two letters (usually C and K or sometimes I and J)"

GRID_ALPHABET = [ALPHABET[i:i+5] for i in range(0, 25, 5)]
print GRID_ALPHABET

get_position = lambda x: ((i,j) for i in range(len(GRID_ALPHABET) for j in range(5)))

decode_letter = lambda i,j: GRID_ALPHABET[i][j]

def decode(c, separator='-'):
    res = ""
    for ele in c:
        if separator in ele:
            i,j = ele.split(separator)
            print i,j
            res += decode_letter(int(i)-1,int(j)-1)
        else:
            res += ele

    return res

print cipher
print decode(cipher)
