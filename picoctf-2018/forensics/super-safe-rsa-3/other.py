"""
c: 6852912621408111077319977337895146513675773631434354606740982767801557171748366333459121828756461570167186658294787143365187108815261640515047211037030906794117484257360380288595045842387504227128811857567452962443662112541078032468433500322827893851561134137810059089431478479245564714492728523925797854
n: 12668806735925867629889937161124075901071522531864659853980189564668245246484135812637807954913385895977581949689980972999567689430154424804930024018454538657150963869395423905562842899938342056091384070221762414396537350016451593159107236884936604875490292308221389917560794454344736580400899722912324347
e: 65537
"""
def printit(m):
    # print m, hex(m)
    m = hex(m)[2:-1]
    m = [int(m[i:i+2],16) for i in range(0, len(m), 2)]
    m = map(chr, m)
    print "".join(m)

def egcd(a, b):
    x,y, u,v = 0,1, 1,0
    while a != 0:
        q, r = b//a, b%a
        m, n = x-u*q, y-v*q
        b,a, x,y, u,v = a,r, u,v, m,n
        gcd = b
    return gcd, x, y

def main():

    f1 = 8850155024684466541
    f2 = 482865155318014658148586656222453383175139094552784966973
    f3 = 81128316330889312096674726094829120193095080916302419647010569425789291820613684598361550018101
    f4 = 14605296752176571131953284109964117724673182174532180923166116417259347047274197077629094324420960721217161765374435456543309316737691

    p = f1 * f4
    q = f3 * f2
    e = 65537
    ct = 2134720827597837735049779790912016065440258293716024714671769081542059907100201632690773029558371916640191974167127423707907144039877567980458957310995930924500949411503242402258287128877441449288734534479531154969188226084263024050947437736343445378059624268405733264774708226125426432643342526630800398

    # compute n
    n = p * q

    # Compute phi(n)
    phi = (p - 1) * (q - 1)

    # Compute modular inverse of e
    gcd, a, b = egcd(e, phi)
    d = a % phi

    print( "n:  " + str(d) );

    # Decrypt ciphertext
    pt = pow(ct, d, n)
    print( "pt: " + str(pt) )
    printit(pt)

if __name__ == "__main__":
    main()
